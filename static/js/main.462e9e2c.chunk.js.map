{"version":3,"sources":["components/Search.js","components/Results.js","components/SearchContainer.js","Home.js","serviceWorker.js","index.js"],"names":["Search","props","onSubmit","type","placeholder","onKeyUp","onInput","Button","variant","value","style","marginLeft","Results","className","fontSize","this","title","Image","src","link","images","fixed_height","url","rounded","React","Component","SearchContainer","state","query","response","search","encodeURIComponent","fetch","then","json","data","console","log","setState","catch","error","event","preventDefault","target","result","map","newLink","embed_url","position","top","Home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAkBeA,EAfA,SAACC,GACd,OACE,6BACI,0BAAMC,SAAUD,EAAMC,UACpB,2BACEC,KAAK,OACLC,YAAY,mBACZC,QAASJ,EAAMK,UAEjB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUL,KAAK,SAASM,MAAM,SAASC,MAAO,CAAEC,WAAY,SAA5E,a,QCKKC,E,iLAZb,OACC,yBAAKC,UAAU,OACd,yBAAKA,UAAU,eACd,wBAAIA,UAAU,QAAQH,MAAO,CAAEI,SAAU,SAAWC,KAAKd,MAAMe,OAC/D,kBAACC,EAAA,EAAD,CAAOJ,UAAU,SAASK,IAAKH,KAAKd,MAAMkB,KAAKC,OAAOC,aAAaC,IAAKC,SAAO,U,GAN9DC,IAAMC,WC8DbC,E,2MA5DbC,MAAQ,CACNC,MAAM,GACNC,SAAU,I,EAGZC,OAAS,WAGP,IAAIR,EAAG,0FAAsFS,mBAAmB,EAAKJ,MAAMC,QAC3HI,MAAMV,GACHW,MAAK,SAAAJ,GAAQ,OAAIA,EAASK,UAE1BD,MAAK,SAAAE,GACJC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAAET,SAAUM,EAAKA,UAEhCI,OAAM,SAAAC,GAAK,OAAIJ,QAAQC,IAAIG,O,EAIhCtC,SAAW,SAACuC,GACVA,EAAMC,iBACN,EAAKZ,U,EAGPxB,QAAS,SAACmC,GACR,EAAKH,SAAS,CACZV,MAAOa,EAAME,OAAOlC,S,wEAKtB,IAAImC,EAAS7B,KAAKY,MAAME,SAASgB,KAAI,SAACV,GACpC,OAAO,kBAAC,EAAD,CACLnB,MAAOmB,EAAKnB,MACZG,KAAMgB,EACNW,QAASX,EAAKY,eAGlB,OACE,6BACE,yBAAKlC,UAAU,SAASH,MAAO,CAAEsC,SAAU,WAAYC,IAAK,SAC1D,4CACA,mGACA,yBAAKvC,MAAO,CAAEsC,SAAU,WAAYC,IAAK,SACvC,kBAAC,EAAD,CACE/C,SAAUa,KAAKb,SACfI,QAASS,KAAKT,YAIpB,yBAAKO,UAAU,UACZE,KAAKY,MAAME,SAAWe,EAAS,mB,GArDZnB,aCQfyB,G,uLANX,OACE,kBAAC,EAAD,U,GAHazB,cCQC0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.462e9e2c.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button'\n\nconst Search = (props) => {\n  return (\n    <div>\n        <form onSubmit={props.onSubmit} >\n          <input\n            type=\"text\"\n            placeholder=\"Search Gifs here\"\n            onKeyUp={props.onInput}\n          />\n          <Button variant=\"primary\" type=\"submit\" value=\"submit\" style={{ marginLeft: \"10px\" }}>Search</Button>\n        </form>\n    </div>\n  )\n}\n\nexport default Search;","import React from 'react';\nimport Image from 'react-bootstrap/Image'\n\nclass Results extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"div\">\n\t\t\t\t<div className=\"title-image\">\n\t\t\t\t\t<h3 className=\"title\" style={{ fontSize: \"18px\" }}>{this.props.title}</h3>\n\t\t\t\t\t<Image className=\"images\" src={this.props.link.images.fixed_height.url} rounded />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\t\n}\n\nexport default Results;","import React, { Component } from 'react';\nimport Search from './Search';\nimport Results from './Results'\n\nclass SearchContainer extends Component {\n  state = {\n    query:'',\n    response: []\n  }\n\n  search = () => {\n    // ?api_key = jLRvlnP8XNkx7nW7LIDVjWC8giYe9Yzw  \n    // query param &q = encodeURIComponent(this.state.query)\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=jLRvlnP8XNkx7nW7LIDVjWC8giYe9Yzw&q=${encodeURIComponent(this.state.query)}`;\n    fetch(url)\n      .then(response => response.json())\n      // parsed the response into json format\n      .then(data => {\n        console.log(data)\n        this.setState({ response: data.data })\n      })\n      .catch(error => console.log(error))\n  }\n\n  // Invoked before rendering when new props or state are being received. Defaults to true.\n  onSubmit = (event) => {\n    event.preventDefault()\n    this.search()\n  }\n\n  onInput= (event) => {\n    this.setState({\n      query: event.target.value\n    })\n  }\n\n  render() {\n    let result = this.state.response.map((data)=> {\n      return <Results\n        title={data.title}\n        link={data}\n        newLink={data.embed_url}\n      />\n    })\n    return(\n      <div>\n        <div className=\"search\" style={{ position: \"relative\", top: \"30px\" }}>\n          <h1>Giphy Search</h1>\n          <h3>The true source for all things giphy...brought to you by Giphy API!</h3>\n          <div style={{ position: \"relative\", top: \"15px\" }}>\n            <Search \n              onSubmit={this.onSubmit}\n              onInput={this.onInput}\n            />\n          </div>\n        </div>\n        <div className=\"result\">\n          {this.state.response ? result : 'Loading...'}\n        </div>\n      </div>\n      \n    )\n  }\n}\n\nexport default SearchContainer;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, { Component } from 'react';\nimport SearchContainer from './components/SearchContainer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Home extends Component {\n  render() {\n    return (\n      <SearchContainer /> \n    );\n  }\n}\n\nexport default Home;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Router>\n    <Home />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}